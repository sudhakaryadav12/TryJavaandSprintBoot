package com.truist.openssl;
 
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;
import org.junit.jupiter.api.Test;
import java.io.*;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.function.Predicate;
 
import static org.junit.jupiter.api.Assertions.*;
public class PEMUtilsTest {
    private String getResourceContent(String path) {
        try (InputStream resource = getResource(path);
             BufferedReader reader = new BufferedReader(new InputStreamReader(resource, StandardCharsets.UTF_8))) {
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        } catch (IOException e) {	
            throw new UncheckedIOException(e);
        }
    }
	private InputStream getResource(String path) {
        return this.getClass().getClassLoader().getResourceAsStream(path);
    }
	@Test
    void loadCertificateHandlesMultipleFiles() {
        List<X509Certificate> certificateList = PEMUtils.loadCertificate("pem/self-signed.pem", "pem/self-signed.pem");
        assertNotNull(certificateList);
        assertTrue(certificateList.size() > 0);
    }

    @Test
    void loadCertificateFromInputStream() {
        InputStream is = getResource("pem/self-signed.pem");
        List<X509Certificate> certificates = PEMUtils.loadCertificate(is);
        assertNotNull(certificates);
        assertFalse(certificates.isEmpty());
    }
    @Test
    void loadCertificateFromPath() {
        Path path = Paths.get("src/test/resources/pem/self-signed.pem");
        List<X509Certificate> certificates = PEMUtils.loadCertificate(path);
        assertNotNull(certificates);
        assertFalse(certificates.isEmpty());
    }
    @Test
    void parseCertificateTest() {
        String certContent = getResourceContent("pem/self-signed.pem");
        List<X509Certificate> certificates = PEMUtils.parseCertificate(certContent);
        assertNotNull(certificates);
        assertFalse(certificates.isEmpty());
    }

	@Test
    void testParsePemContentValidCertificate() throws Exception {
        String pem = getResourceContent("pem/self-signed.pem");
        List<Object> result = invokeParsePemContent(pem, PEMSegmentType.CERTIFICATE::equals);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }
    @Test
    void testParsePemContentValidPrivateKey() throws Exception {
        String pem = getResourceContent("pem/self-signed.pem");
        List<Object> result = invokeParsePemContent(pem, PEMSegmentType.PRIVATE_KEY::equals);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }
   @Test
    void testParsePemContentEmptyString() throws Exception {
        List<Object> result = invokeParsePemContent("", PEMSegmentType.CERTIFICATE::equals);
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
	
	@Test
    void getContentTest() {
        String pem = getResourceContent("pem/self-signed.pem");
        ByteArrayInputStream stream = new ByteArrayInputStream(pem.getBytes(StandardCharsets.UTF_8));
        String content = PEMUtils.getContent(stream);
        assertTrue(content.contains("BEGIN CERTIFICATE"));
    }
	

    @Test
    void testExtractCertificateWithvalidX509CertificateHolder() throws Exception {
		String pem = getResourceContent("pem/self-signed.pem");
        X509CertificateHolder certHolder = new X509CertificateHolder(pem.getBytes(StandardCharsets.UTF_8));
        Optional<X509Certificate> certificate = PEMUtils.extractCertificate(certHolder);
        assertTrue(certificate.isPresent());
        assertEquals("X.509", certificate.get().getType());
    }
	
	  @Test
    void testextractPrivateKeyInfoWithPrivateKeyInfo() throws Exception {
		String pem = getResourceContent("pem/self-signed.pem");
        PrivateKeyInfo privateKeyInfo = new PrivateKeyInfo(pem.getBytes(StandardCharsets.UTF_8));
        Optional<PrivateKeyInfo> keyInfo = PEMUtils.extractPrivateKeyInfo(privateKeyInfo,"");
        assertNotNull(keyInfo);
    }
	
	
	  @Test
    void testextractPrivateKeyInfoWithPKCS8EncryptedPrivateKeyInfo() throws Exception {
		String pem = getResourceContent("pem/self-signed.pem");
        PKCS8EncryptedPrivateKeyInfo privateKeyInfo = new PKCS8EncryptedPrivateKeyInfo(pem.getBytes(StandardCharsets.UTF_8));
        Optional<PrivateKeyInfo> keyInfo = PEMUtils.extractPrivateKeyInfo(privateKeyInfo,"");
        assertNotNull(keyInfo);
    }
	
	
	  @Test
    void testextractPrivateKeyInfoWithPEMKeyPair() throws Exception {
		String pem = getResourceContent("pem/self-signed.pem");
        PEMKeyPair pemKeyPair = new PEMKeyPair(pem.getBytes(StandardCharsets.UTF_8));
        Optional<PrivateKeyInfo> keyInfo = PEMUtils.extractPrivateKeyInfo(pemKeyPair,"");
        assertNotNull(keyInfo);
    }
	
	
	  @Test
    void testextractPrivateKeyInfoWithPEMEncryptedKeyPair() throws Exception {
		String pem = getResourceContent("pem/self-signed.pem");
        PEMEncryptedKeyPair pemEncryptedKeyPair = new PEMEncryptedKeyPair(pem.getBytes(StandardCharsets.UTF_8));
        Optional<PrivateKeyInfo> keyInfo = PEMUtils.extractPrivateKeyInfo(pemEncryptedKeyPair,"");
        assertNotNull(keyInfo);
    }
	
	


	@SuppressWarnings("unchecked")
    private List<Object> invokeParsePemContent(String content, Predicate<PEMSegmentType> predicate) throws Exception {
        Method method = PEMUtils.class.getDeclaredMethod("parsePemContent", String.class, Predicate.class);
        method.setAccessible(true);
        return (List<Object>) method.invoke(null, content, predicate);
    }
	
}